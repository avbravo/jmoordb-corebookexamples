package com.jmoordbcore.capitulo23faces.repository;
// <editor-fold defaultstate="collapsed" desc="imports">

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import org.eclipse.microprofile.config.Config;
import org.eclipse.microprofile.config.inject.ConfigProperty;
/**
* MongoDB
*/
import com.mongodb.client.MongoDatabase;
import static com.mongodb.client.model.Filters.eq;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import org.bson.Document;
import com.mongodb.client.model.FindOneAndUpdateOptions;
import com.mongodb.client.model.ReturnDocument;
import com.mongodb.client.result.InsertOneResult;
import org.bson.BsonInt64;
import org.bson.conversions.Bson;
import org.bson.BsonDocument;
import com.mongodb.client.model.Filters;
import com.mongodb.client.result.UpdateResult;
/**
* Java
*/
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.Optional;
import java.util.function.Supplier;
import com.jmoordb.core.util.MessagesUtil;
import com.jmoordb.core.model.Pagination;
import com.jmoordb.core.model.Sorted;
import com.jmoordb.core.util.JmoordbCoreDateUtil;
import java.util.HashSet;
import com.jmoordbcore.capitulo23faces.model.Persona;


// </editor-fold>
@ApplicationScoped
public class PersonaRepositoryImpl  implements PersonaRepository{
// <editor-fold defaultstate="collapsed" desc="inject">

    @Inject
    MongoClient mongoClient;
/**
* Microprofile Config
*/
    @Inject
    Config config;
    @Inject
    @ConfigProperty(name = "mongodb.database")
    String mongodbDatabase;

    String mongodbCollection = "persona";
/**
* AutogeneratedRepository
*/
    @Inject
    com.jmoordbcore.capitulo23faces.repository.AutogeneratedRepository autogeneratedRepository;
/**
* Supplier
*/
    @Inject
    com.jmoordbcore.capitulo23faces.model.PersonaSupplier personaSupplier;
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.util.List<com.jmoordbcore.capitulo23faces.model.Persona> findByNombre(java.lang.String nombre ) ">

    @Override
    public java.util.List<com.jmoordbcore.capitulo23faces.model.Persona> findByNombre(java.lang.String nombre) {
        List<Persona> list = new ArrayList<>();
        try {
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
               MongoCollection<Document> collection = database.getCollection(mongodbCollection);
               MongoCursor<Document> cursor;
               Bson filter =Filters.eq("nombre",nombre);

		cursor = collection.find( filter )
					.iterator();

               try{
                  while (cursor.hasNext()) {
                        list.add(personaSupplier.get(Persona::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.util.List<com.jmoordbcore.capitulo23faces.model.Persona> findByNombrePagination(java.lang.String nombre,com.jmoordb.core.model.Pagination pagination ) ">

    @Override
    public java.util.List<com.jmoordbcore.capitulo23faces.model.Persona> findByNombrePagination(java.lang.String nombre,com.jmoordb.core.model.Pagination pagination) {
        List<Persona> list = new ArrayList<>();
        try {
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
               MongoCollection<Document> collection = database.getCollection(mongodbCollection);
               MongoCursor<Document> cursor;
               Bson filter =Filters.eq("nombre",nombre);

		cursor = collection.find( filter )
					.skip(pagination.skip())
			.limit(pagination.limit())
			.iterator();

               try{
                  while (cursor.hasNext()) {
                        list.add(personaSupplier.get(Persona::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.util.List<com.jmoordbcore.capitulo23faces.model.Persona> findByDeporte_deportePagination(java.lang.String deporte,com.jmoordb.core.model.Pagination pagination ) ">

    @Override
    public java.util.List<com.jmoordbcore.capitulo23faces.model.Persona> findByDeporte_deportePagination(java.lang.String deporte,com.jmoordb.core.model.Pagination pagination) {
        List<Persona> list = new ArrayList<>();
        try {
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
               MongoCollection<Document> collection = database.getCollection(mongodbCollection);
               MongoCursor<Document> cursor;
               Bson filter =Filters.eq("deporte.deporte",deporte);

		cursor = collection.find( filter )
					.skip(pagination.skip())
			.limit(pagination.limit())
			.iterator();

               try{
                  while (cursor.hasNext()) {
                        list.add(personaSupplier.get(Persona::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.util.List<com.jmoordbcore.capitulo23faces.model.Persona> findByIdpersonaGreaterThanPaginationSorted(java.lang.Long idpais,com.jmoordb.core.model.Pagination pagination,com.jmoordb.core.model.Sorted sorted ) ">

    @Override
    public java.util.List<com.jmoordbcore.capitulo23faces.model.Persona> findByIdpersonaGreaterThanPaginationSorted(java.lang.Long idpais,com.jmoordb.core.model.Pagination pagination,com.jmoordb.core.model.Sorted sorted) {
        List<Persona> list = new ArrayList<>();
        try {
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
               MongoCollection<Document> collection = database.getCollection(mongodbCollection);
               MongoCursor<Document> cursor;
               Bson filter =Filters.gt("idpersona",idpais);

		cursor = collection.find( filter )
					.skip(pagination.skip())
			.limit(pagination.limit())
					.sort(sorted.getSort())
	.iterator();

               try{
                  while (cursor.hasNext()) {
                        list.add(personaSupplier.get(Persona::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="java.lang.Long count(com.jmoordb.core.model.Search[] search ) ">

    @Override
    public java.lang.Long count(com.jmoordb.core.model.Search[] search) {
        Long contador = 0L;
        try {
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
               MongoCollection<Document> collection = database.getCollection(mongodbCollection);
               Document whereCondition = new Document();
               if (search.length != 0) {
                  whereCondition = search[0].getFilter();
               } 
               if (whereCondition.isEmpty()) {
                  contador = collection.countDocuments();
               } else {
                  contador = collection.countDocuments(whereCondition);
               }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return contador;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc=" public Optional<Persona> save(Persona persona)">

    @Override
    public Optional<Persona> save(Persona persona) {
        try {
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
               MongoCollection<Document> collection = database.getCollection(mongodbCollection);
               persona.setIdpersona(autogeneratedRepository.generate(mongodbDatabase, mongodbCollection));
               if (findByPk(persona.getIdpersona()).isPresent()) { 
                   MessagesUtil.warning("There is already a record with that id");
                  return Optional.of(persona);
               }
               InsertOneResult insertOneResult = collection.insertOne(personaSupplier.toDocument(persona));
               if (insertOneResult.getInsertedId() != null) {
                  return Optional.of(persona);
               }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return Optional.empty();
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Boolean update(Persona persona)">

    @Override
    public Boolean update(Persona persona) {
        try {
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
               MongoCollection<Document> collection = database.getCollection(mongodbCollection);
               if (!findByPk(persona.getIdpersona()).isPresent()) { 
                   MessagesUtil.warning("Not found a record with that id");
                    return Boolean.FALSE;
               }
               Bson filter = Filters.empty();
               filter = Filters.eq("idpersona",persona.getIdpersona());
               UpdateResult result = collection.updateOne(filter,personaSupplier.toDocument(persona));
               if (result.getModifiedCount() > 0) {
                  return Boolean.TRUE;
               }
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return Boolean.FALSE;
     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public List<Persona> findAllPaginationSorted(Pagination pagination, Sorted sorted)">

    @Override
    public List<Persona> findAllPaginationSorted(Pagination pagination, Sorted sorted) {
        List<Persona> list = new ArrayList<>();
        try {
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
               MongoCollection<Document> collection = database.getCollection(mongodbCollection);
               MongoCursor<Document> cursor;
               		cursor = collection.find()
					.skip(pagination.skip())
			.limit(pagination.limit())
			.sort(sorted.getSort())
		.iterator();

               try{
                  while (cursor.hasNext()) {
                        list.add(personaSupplier.get(Persona::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public List<Persona> findAll()">

    @Override
    public List<Persona> findAll() {
        List<Persona> list = new ArrayList<>();
        try {
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
               MongoCollection<Document> collection = database.getCollection(mongodbCollection);
               MongoCursor<Document> cursor;
               		cursor = collection.find()
				.iterator();

               try{
                  while (cursor.hasNext()) {
                        list.add(personaSupplier.get(Persona::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public List<Persona> findAllPagination(Pagination pagination)">

    @Override
    public List<Persona> findAllPagination(Pagination pagination) {
        List<Persona> list = new ArrayList<>();
        try {
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
               MongoCollection<Document> collection = database.getCollection(mongodbCollection);
               MongoCursor<Document> cursor;
               		cursor = collection.find()
					.skip(pagination.skip())
			.limit(pagination.limit())
		.iterator();

               try{
                  while (cursor.hasNext()) {
                        list.add(personaSupplier.get(Persona::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public List<Persona> findAllSorted(Sorted sorted)">

    @Override
    public List<Persona>  findAllSorted(Sorted sorted) {
        List<Persona> list = new ArrayList<>();
        try {
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
               MongoCollection<Document> collection = database.getCollection(mongodbCollection);
               MongoCursor<Document> cursor;
               		cursor = collection.find()
					.sort(sorted.getSort())
		.iterator();

               try{
                  while (cursor.hasNext()) {
                        list.add(personaSupplier.get(Persona::new, cursor.next()));
                  }
               } finally {
                     cursor.close();
               } 
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return list;

     }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="public Optional<Persona> findByPk(Long id )">

    public Optional<Persona> findByPk(Long id ) {
        try {
            MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
            MongoCollection<Document> collection = database.getCollection(mongodbCollection);
            Document doc = collection.find(eq("idpersona", id)).first();
            if(doc == null){
               return Optional.empty();
            }
            Persona persona = personaSupplier.get(Persona::new, doc);
            return Optional.of(persona);
       } catch (Exception e) {
            MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
       }
       return Optional.empty();
    }
// </editor-fold>
// <editor-fold defaultstate="collapsed" desc="Long deleteByPK(Long id )">

    @Override
    public Long deleteByPk(Long id){
        try {
               MongoDatabase database = mongoClient.getDatabase(mongodbDatabase);
               MongoCollection<Document> collection = database.getCollection(mongodbCollection);
               MongoCursor<Document> cursor;
               Bson filter = Filters.eq("idpersona",id);

		com.mongodb.client.result.DeleteResult deleteResult = collection.deleteOne(filter);

               return deleteResult.getDeletedCount();
         } catch (Exception e) {
              MessagesUtil.error(MessagesUtil.nameOfClassAndMethod() + " " + e.getLocalizedMessage());
         }
         return 0L;
     }
// </editor-fold>

}